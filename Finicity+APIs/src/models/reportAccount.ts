/**
 * Finicity APIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  bigint,
  lazy,
  number,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import { AccountDetail, accountDetailSchema } from './accountDetail';
import {
  PrequalificationReportAssetSummary,
  prequalificationReportAssetSummarySchema,
} from './prequalificationReportAssetSummary';
import {
  ReportIncomeStream,
  reportIncomeStreamSchema,
} from './reportIncomeStream';
import { ReportTransaction, reportTransactionSchema } from './reportTransaction';

export interface ReportAccount {
  /** A Finicity account ID */
  id: string;
  /** The account number from the institution (all digits except the last four are obfuscated) */
  number: string;
  /** The name(s) of the account owner(s). This field is optional. If no owner information is available, this field will not appear in the report. */
  ownerName: string;
  /** The mailing address of the account owner(s). This field is optional. If no owner information is available, this field will not appear in the report. */
  ownerAddress: string;
  /** The account name from the institution */
  name: string;
  /** One of the values from Account Types */
  type: string;
  /** A currency code */
  currency?: string;
  /** The available balance for the account */
  availableBalance?: number;
  /** The status of the most recent aggregation attempt (see [Aggregation Status Codes](https://docs.finicity.com/aggregation-status-codes/)). Won't be present until you have run your first aggregation for the account. */
  aggregationStatusCode: number;
  /** The cleared balance of the account as-of balanceDate */
  balance: number;
  /** A date in Unix epoch time (in seconds). See also: [Handling Epoch Dates and Times](https://docs.finicity.com/endpoint-syntax-and-format/). */
  balanceDate: bigint;
  /** The average monthly balance of this account */
  averageMonthlyBalance: number;
  /** An array of transactions belonging to the account */
  transactions: ReportTransaction[];
  asset: PrequalificationReportAssetSummary;
  details: AccountDetail;
  incomeStream?: ReportIncomeStream;
  /** A list of income stream records */
  incomeStreams?: ReportIncomeStream[];
  /** The count for the total number of insufficient funds transactions, based on the `fromDate` of the report. */
  totNumberInsufficientFundsFeeDebitTxAccount?: bigint;
  /** The count for the total number of insufficient funds transactions for the last two months, based on the `fromDate` of the report. */
  totNumberInsufficientFundsFeeDebitTxOver2MonthsAccount?: bigint;
  /** The count for the total number of insufficient funds transactions for the last six months, based on the `fromDate` of the report. */
  totNumberInsufficientFundsFeeDebitTxOver6MonthsAccount?: bigint;
  /** The number of days since the most recent insufficient funds transaction, based on the `fromDate` of the report. */
  totNumberDaysSinceMostRecentInsufficientFundsFeeDebitTxAccount?: bigint;
}

export const reportAccountSchema: Schema<ReportAccount> = object({
  id: ['id', string()],
  number: ['number', string()],
  ownerName: ['ownerName', string()],
  ownerAddress: ['ownerAddress', string()],
  name: ['name', string()],
  type: ['type', string()],
  currency: ['currency', optional(string())],
  availableBalance: ['availableBalance', optional(number())],
  aggregationStatusCode: ['aggregationStatusCode', number()],
  balance: ['balance', number()],
  balanceDate: ['balanceDate', bigint()],
  averageMonthlyBalance: ['averageMonthlyBalance', number()],
  transactions: ['transactions', array(lazy(() => reportTransactionSchema))],
  asset: ['asset', lazy(() => prequalificationReportAssetSummarySchema)],
  details: ['details', lazy(() => accountDetailSchema)],
  incomeStream: [
    'incomeStream',
    optional(lazy(() => reportIncomeStreamSchema)),
  ],
  incomeStreams: [
    'incomeStreams',
    optional(array(lazy(() => reportIncomeStreamSchema))),
  ],
  totNumberInsufficientFundsFeeDebitTxAccount: [
    'totNumberInsufficientFundsFeeDebitTxAccount',
    optional(bigint()),
  ],
  totNumberInsufficientFundsFeeDebitTxOver2MonthsAccount: [
    'totNumberInsufficientFundsFeeDebitTxOver2MonthsAccount',
    optional(bigint()),
  ],
  totNumberInsufficientFundsFeeDebitTxOver6MonthsAccount: [
    'totNumberInsufficientFundsFeeDebitTxOver6MonthsAccount',
    optional(bigint()),
  ],
  totNumberDaysSinceMostRecentInsufficientFundsFeeDebitTxAccount: [
    'totNumberDaysSinceMostRecentInsufficientFundsFeeDebitTxAccount',
    optional(bigint()),
  ],
});
