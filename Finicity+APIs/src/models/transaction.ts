/**
 * Finicity APIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  bigint,
  lazy,
  number,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import { Categorization, categorizationSchema } from './categorization';
import {
  TransactionTypeEnum,
  transactionTypeEnumSchema,
} from './transactionTypeEnum';

export interface Transaction {
  /** A Finicity transaction ID */
  id: bigint;
  /** The total amount of the transaction. Transactions for deposits are positive values, withdrawals and debits are negative values. */
  amount: number;
  /** A Finicity account ID represented as a number */
  accountId: bigint;
  /** A Finicity customer ID represented as a number. See also: "Add Customer". */
  customerId: bigint;
  /** One of active, pending, or shadow (see [Pending and Shadow Transactions](https://docs.finicity.com/pending-and-shadow-transactions/)) */
  status: string;
  /** The description of the transaction, as provided by the institution (often known as payee). In the event that this field is left blank by the institution, Finicity will pass a value of "No description provided by institution". All other values are provided by the institution. */
  description: string;
  /** The memo field of the transaction, as provided by the institution. The institution must provide either a description, a memo, or both. It is recommended to concatenate the two fields into a single value */
  memo?: string;
  /** A date in Unix epoch time (in seconds). See also: [Handling Epoch Dates and Times](https://docs.finicity.com/endpoint-syntax-and-format/). */
  postedDate: bigint;
  /** A date in Unix epoch time (in seconds). See also: [Handling Epoch Dates and Times](https://docs.finicity.com/endpoint-syntax-and-format/). */
  transactionDate?: bigint;
  /** A date in Unix epoch time (in seconds). See also: [Handling Epoch Dates and Times](https://docs.finicity.com/endpoint-syntax-and-format/). */
  effectiveDate?: bigint;
  /** A date in Unix epoch time (in seconds). See also: [Handling Epoch Dates and Times](https://docs.finicity.com/endpoint-syntax-and-format/). */
  firstEffectiveDate?: bigint;
  /** A date in Unix epoch time (in seconds). See also: [Handling Epoch Dates and Times](https://docs.finicity.com/endpoint-syntax-and-format/). */
  createdDate: bigint;
  /** If provided by the institution, the following values may be returned in the field of a record: */
  type?: TransactionTypeEnum;
  /** The check number of the transaction, as provided by the institution */
  checkNum?: number;
  /** The portion of the transaction allocated to escrow, if available */
  escrowAmount?: number;
  /** The portion of the transaction allocated to fee, if available */
  feeAmount?: number;
  /** The portion of the transaction allocated to interest, if available */
  interestAmount?: number;
  /** The portion of the transaction allocated to principal, if available */
  principalAmount?: number;
  /** The number of units (e.g. individual shares) in the transaction, if available */
  unitQuantity?: number;
  /** Share Price for investment unit (e.g., stocks, mutual funds) */
  unitPrice?: number;
  /** Categorization Record */
  categorization: Categorization;
  /** The type of sub account from which funds came */
  subaccountSecurityType?: string;
  /** Transaction commission */
  commissionAmount?: number;
  /** Ticker symbol for the investment related to the transaction */
  ticker?: string;
  /** Finicity derived field that normalizes the transaction type from the FI */
  investmentTransactionType?: string;
  /** Taxes applicable to the investment trade */
  taxesAmount?: number;
  /** If the foreign amount value is present then this is the currency code of that foreign amount */
  currencySymbol?: string;
}

export const transactionSchema: Schema<Transaction> = object({
  id: ['id', bigint()],
  amount: ['amount', number()],
  accountId: ['accountId', bigint()],
  customerId: ['customerId', bigint()],
  status: ['status', string()],
  description: ['description', string()],
  memo: ['memo', optional(string())],
  postedDate: ['postedDate', bigint()],
  transactionDate: ['transactionDate', optional(bigint())],
  effectiveDate: ['effectiveDate', optional(bigint())],
  firstEffectiveDate: ['firstEffectiveDate', optional(bigint())],
  createdDate: ['createdDate', bigint()],
  type: ['type', optional(transactionTypeEnumSchema)],
  checkNum: ['checkNum', optional(number())],
  escrowAmount: ['escrowAmount', optional(number())],
  feeAmount: ['feeAmount', optional(number())],
  interestAmount: ['interestAmount', optional(number())],
  principalAmount: ['principalAmount', optional(number())],
  unitQuantity: ['unitQuantity', optional(number())],
  unitPrice: ['unitPrice', optional(number())],
  categorization: ['categorization', lazy(() => categorizationSchema)],
  subaccountSecurityType: ['subaccountSecurityType', optional(string())],
  commissionAmount: ['commissionAmount', optional(number())],
  ticker: ['ticker', optional(string())],
  investmentTransactionType: ['investmentTransactionType', optional(string())],
  taxesAmount: ['taxesAmount', optional(number())],
  currencySymbol: ['currencySymbol', optional(string())],
});
