/**
 * Finicity APIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  bigint,
  boolean,
  lazy,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import { Branding, brandingSchema } from './branding';
import {
  InstitutionAddress,
  institutionAddressSchema,
} from './institutionAddress';

/** A financial institution */
export interface Institution {
  /** The ID of a financial institution, represented as a number */
  id: bigint;
  /** The name of the institution */
  name?: string;
  /**
   * `true`: The institution is certified for the Transaction Aggregation product
   * `false`: The institution is decertified for the Transaction Aggregation product
   */
  transAgg: boolean;
  /**
   * `true`: The institution is certified for the ACH product
   * `false`: The institution is decertified for the ACH product
   */
  ach: boolean;
  /**
   * `true`: The institution is certified for the Statement Aggregation product
   * `false`: The institution is decertified for the Statement Aggregation product
   */
  stateAgg: boolean;
  /**
   * `true`: The institution is certified for the VOI product
   * `false`: The institution is decertified for the VOI product
   */
  voi: boolean;
  /**
   * `true`: The institution is certified for the VOA product
   * `false`: The institution is decertified for the VOA product
   */
  voa: boolean;
  /**
   * `true`: The institution is certified for the Account History Aggregation product
   * `false`: The institution is decertified for the Account History Aggregation product
   */
  aha: boolean;
  /**
   * `true`: The institution is certified for the Account Balance Check (ABC) product
   * `false`: The institution is decertified for the Account Balance Check product
   */
  availBalance: boolean;
  /**
   * `true`: The institution is certified for the Account Owner product
   * `false`: The institution is decertified for the Account Owner product
   */
  accountOwner: boolean;
  /** Values: Banking, Investments, Credit Cards/Accounts, Workplace Retirement, Mortgages and Loans, Insurance */
  accountTypeDescription?: string;
  /** A phone number */
  phone?: string;
  /** The URL of the institution's primary home page */
  urlHomeApp?: string;
  /** The URL of the institution's login page */
  urlLogonApp?: string;
  /** `true`: The institution is an OAuth connection */
  oauthEnabled: boolean;
  /** Institution's forgot password page */
  urlForgotPassword?: string;
  /** Institution's signup page */
  urlOnlineRegistration?: string;
  /** Institution's class */
  mClass?: string;
  /** Special instructions given to customers for login */
  specialText?: string;
  /**
   * Instructions given to the customer before they are sent to the institution website to login for OAuth institutions.
   * Note: this helps the customer to provide the proper permission for data needed for the application.
   */
  specialInstructions?: string[];
  /** The address of a financial institution */
  address?: InstitutionAddress;
  /** A currency code */
  currency: string;
  /** An email address */
  email?: string;
  /** Institution's status: online, offline, maintenance, testing */
  status: string;
  /** The ID of a financial institution, represented as a number */
  newInstitutionId?: bigint;
  /** All assets are SVGs so can be slightly resized without any issues. */
  branding?: Branding;
  /** The ID of a financial institution, represented as a number */
  oauthInstitutionId?: bigint;
}

export const institutionSchema: Schema<Institution> = object({
  id: ['id', bigint()],
  name: ['name', optional(string())],
  transAgg: ['transAgg', boolean()],
  ach: ['ach', boolean()],
  stateAgg: ['stateAgg', boolean()],
  voi: ['voi', boolean()],
  voa: ['voa', boolean()],
  aha: ['aha', boolean()],
  availBalance: ['availBalance', boolean()],
  accountOwner: ['accountOwner', boolean()],
  accountTypeDescription: ['accountTypeDescription', optional(string())],
  phone: ['phone', optional(string())],
  urlHomeApp: ['urlHomeApp', optional(string())],
  urlLogonApp: ['urlLogonApp', optional(string())],
  oauthEnabled: ['oauthEnabled', boolean()],
  urlForgotPassword: ['urlForgotPassword', optional(string())],
  urlOnlineRegistration: ['urlOnlineRegistration', optional(string())],
  mClass: ['class', optional(string())],
  specialText: ['specialText', optional(string())],
  specialInstructions: ['specialInstructions', optional(array(string()))],
  address: ['address', optional(lazy(() => institutionAddressSchema))],
  currency: ['currency', string()],
  email: ['email', optional(string())],
  status: ['status', string()],
  newInstitutionId: ['newInstitutionId', optional(bigint())],
  branding: ['branding', optional(lazy(() => brandingSchema))],
  oauthInstitutionId: ['oauthInstitutionId', optional(bigint())],
});
