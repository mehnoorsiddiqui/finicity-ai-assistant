/**
 * Finicity APIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ErrorMessageError } from '../errors/errorMessageError';
import {
  ConnectEmailParameters,
  connectEmailParametersSchema,
} from '../models/connectEmailParameters';
import {
  ConnectEmailUrl,
  connectEmailUrlSchema,
} from '../models/connectEmailUrl';
import {
  ConnectJointBorrowerEmailParameters,
  connectJointBorrowerEmailParametersSchema,
} from '../models/connectJointBorrowerEmailParameters';
import {
  ConnectJointBorrowerParameters,
  connectJointBorrowerParametersSchema,
} from '../models/connectJointBorrowerParameters';
import {
  ConnectParameters,
  connectParametersSchema,
} from '../models/connectParameters';
import { ConnectUrl, connectUrlSchema } from '../models/connectUrl';
import {
  FixConnectParameters,
  fixConnectParametersSchema,
} from '../models/fixConnectParameters';
import {
  LiteConnectParameters,
  liteConnectParametersSchema,
} from '../models/liteConnectParameters';
import { BaseController } from './baseController';

export class ConnectController extends BaseController {
  /**
   * Generate a Connect 2.0 URL link to add within your own applications.
   *
   * Use the `experience` parameter to call Connect (per session) in the body of the request. Configure
   * the `experience` parameter to change the brand color, logo, icon, which credit decisioning report to
   * generate when the Connect application completes, and more.
   *
   * Note: contact your Sales Account Team to set up the `experience` parameter.
   *
   *
   * MVS Developers: You can pre-populate the consumer's SSN on the "Find employment records" page at the
   * beginning of the MVS payroll app. Pass the SSN value for the consumer in the body of the request
   * call.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param body
   * @return Response from the API call
   */
  async generateConnectUrl(
    body: ConnectParameters,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ConnectUrl>> {
    const req = this.createRequest('POST', '/connect/v2/generate');
    const mapped = req.prepareArgs({ body: [body, connectParametersSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    return req.callAsJson(connectUrlSchema, requestOptions);
  }

  /**
   * Connect Lite is a variation of Connect Full (`POST /connect/v2/generate`), which has a limited set
   * of features.
   * * Sign in, user's credentials, and Multi-Factor Authentication (MFA)
   * * No user account management
   *
   * The Connect Web SDK isn't a requirement when using Connect lite. However, if you want to use the SDK
   * events, routes, and user events, then you must integrate with the Connect Web SDK.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param body
   * @return Response from the API call
   */
  async generateLiteConnectUrl(
    body: LiteConnectParameters,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ConnectUrl>> {
    const req = this.createRequest('POST', '/connect/v2/generate/lite');
    const mapped = req.prepareArgs({
      body: [body, liteConnectParametersSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    return req.callAsJson(connectUrlSchema, requestOptions);
  }

  /**
   * Use the Connect Fix endpoint when the following conditions occur:
   * * The connection to the user's financial institution is lost
   * * The user's credentials were updated (for any number of reasons)
   * * The user's MFA challenge has expired
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param body
   * @return Response from the API call
   */
  async generateFixConnectUrl(
    body: FixConnectParameters,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ConnectUrl>> {
    const req = this.createRequest('POST', '/connect/v2/generate/fix');
    const mapped = req.prepareArgs({
      body: [body, fixConnectParametersSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.callAsJson(connectUrlSchema, requestOptions);
  }

  /**
   * Same as Connect Full (`POST /connect/v2/generate`) but send a Connect email to a consumer.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param body
   * @return Response from the API call
   */
  async sendConnectEmail(
    body: ConnectEmailParameters,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ConnectEmailUrl>> {
    const req = this.createRequest('POST', '/connect/v2/send/email');
    const mapped = req.prepareArgs({
      body: [body, connectEmailParametersSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    return req.callAsJson(connectEmailUrlSchema, requestOptions);
  }

  /**
   * Same as Connect Full (`POST /connect/v2/generate`) but for joint borrowers.
   *
   * MVS prompts both the primary and joint borrower to enter each of their financial, payroll, and
   * paystub information in the same Connect session.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param body
   * @return Response from the API call
   */
  async generateJointBorrowerConnectUrl(
    body: ConnectJointBorrowerParameters,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ConnectUrl>> {
    const req = this.createRequest(
      'POST',
      '/connect/v2/generate/jointBorrower'
    );
    const mapped = req.prepareArgs({
      body: [body, connectJointBorrowerParametersSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    return req.callAsJson(connectUrlSchema, requestOptions);
  }

  /**
   * Same as Connect Joint Borrower (`POST /connect/v2/generate/jointBorrower`) but send a Connect email
   * to at least one of the joint borrower's email addresses.
   *
   * When the consumer opens the email, MVS prompts both the primary and joint borrower to enter each of
   * their financial, payroll, and paystub information in the same Connect session.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param body
   * @return Response from the API call
   */
  async sendJointBorrowerConnectEmail(
    body: ConnectJointBorrowerEmailParameters,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ConnectEmailUrl>> {
    const req = this.createRequest(
      'POST',
      '/connect/v2/send/email/jointBorrower'
    );
    const mapped = req.prepareArgs({
      body: [body, connectJointBorrowerEmailParametersSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    return req.callAsJson(connectEmailUrlSchema, requestOptions);
  }
}
