/**
 * Finicity APIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ErrorMessageError } from '../errors/errorMessageError';
import {
  ReportConstraints,
  reportConstraintsSchema,
} from '../models/reportConstraints';
import { ReportData, reportDataSchema } from '../models/reportData';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class VerifyAssetsController extends BaseController {
  /**
   * Generate a Verification of Assets (VOA) report for all checking, savings, money market, and
   * investment accounts for the given customer. This service retrieves up to twelve months of
   * transaction history for each account and uses this information to generate the VOA report.
   *
   * This is a premium service. The billing rate is the variable rate for Verification of Assets under
   * the current subscription plan. The billable event is the successful generation of a VOA report.
   *
   * A report consumer must be created for the given customer before calling this API (see "Consumers").
   *
   * If no account of type checking, savings, money market, or investment is found, the service will
   * return HTTP 400 Bad Request.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param customerId   A Finicity customer ID
   * @param body
   * @param callbackUrl  A Report Listener URL to receive notifications. The webhook must
   *                                                 respond to the Finicity API with 2xx HTTP status code.
   * @return Response from the API call
   */
  async generateVOAReport(
    customerId: string,
    body: ReportConstraints,
    callbackUrl?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ReportData>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      customerId: [customerId, string()],
      body: [body, reportConstraintsSchema],
      callbackUrl: [callbackUrl, optional(string())],
    });
    req.header('Content-Type', 'application/json');
    req.query('callbackUrl', mapped.callbackUrl);
    req.json(mapped.body);
    req.appendTemplatePath`/decisioning/v2/customers/${mapped.customerId}/voa`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.callAsJson(reportDataSchema, requestOptions);
  }

  /**
   * Generate a Verification of Assets with Income (VOAI) report for all checking, savings, money market,
   * and investment accounts for the given customer. This service retrieves up to 24 months of
   * transaction history for each account and uses this information to generate the VOAI report. The
   * report includes 1 - 6 months of all debit and credit transactions for asset verification. By default,
   * the history is set to 61 days, however, you can change the transaction history in this section by
   * setting the `fromDate` parameter. The report also includes up to 24 months of income credit
   * transactions (ordered by account and confidence level) regardless of `fromDate` for income
   * verification.
   *
   * This is a premium service. The billable event is the successful generation of a VOAI report.
   *
   * A report consumer must be created for the given customer before calling this API (see "Consumers").
   *
   * If no account of type checking, savings, money market, or investment is found, the service will
   * return HTTP 400 Bad Request.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param customerId   A Finicity customer ID
   * @param body
   * @param callbackUrl  A Report Listener URL to receive notifications. The webhook must
   *                                                 respond to the Finicity API with 2xx HTTP status code.
   * @return Response from the API call
   */
  async generateVOAWithIncomeReport(
    customerId: string,
    body: ReportConstraints,
    callbackUrl?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ReportData>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      customerId: [customerId, string()],
      body: [body, reportConstraintsSchema],
      callbackUrl: [callbackUrl, optional(string())],
    });
    req.header('Content-Type', 'application/json');
    req.query('callbackUrl', mapped.callbackUrl);
    req.json(mapped.body);
    req.appendTemplatePath`/decisioning/v2/customers/${mapped.customerId}/voaHistory`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.callAsJson(reportDataSchema, requestOptions);
  }

  /**
   * Generate a Prequalification Report (`preQualVoa`) for all checking, savings, money market, and
   * investment accounts for the given customer. This service retrieves account and owner information as
   * well as the number of NSFs for any account that is a checking account for the customer.
   *
   * This is a premium service. The billing rate is billed per report for the Prequalification report.
   *
   * A report consumer must be created for the given customer before calling this API (see "Consumers").
   *
   * If no account of type checking, savings, money market, or investment is found, the service will
   * return HTTP 400 Bad Request.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param customerId   A Finicity customer ID
   * @param body
   * @param callbackUrl  A Report Listener URL to receive notifications. The webhook must
   *                                                 respond to the Finicity API with 2xx HTTP status code.
   * @return Response from the API call
   */
  async generatePrequalificationReport(
    customerId: string,
    body: ReportConstraints,
    callbackUrl?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ReportData>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      customerId: [customerId, string()],
      body: [body, reportConstraintsSchema],
      callbackUrl: [callbackUrl, optional(string())],
    });
    req.header('Content-Type', 'application/json');
    req.query('callbackUrl', mapped.callbackUrl);
    req.json(mapped.body);
    req.appendTemplatePath`/decisioning/v2/customers/${mapped.customerId}/preQualVoa`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.callAsJson(reportDataSchema, requestOptions);
  }

  /**
   * Retrieve all checking, savings, money market, and investment accounts for a customer. The account,
   * owner information, and the number of insufficient funds (NSFs) for checking accounts are also
   * provided.
   *
   * This is a premium service, billable per every successful API call.
   *
   * If no account type of checking, savings, money market, or investment is found, the service will
   * return HTTP 400 Bad Request.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param customerId   A Finicity customer ID
   * @param body
   * @param callbackUrl  A Report Listener URL to receive notifications. The webhook must
   *                                                 respond to the Finicity API with 2xx HTTP status code.
   * @return Response from the API call
   */
  async generatePrequalificationNonCRAReport(
    customerId: string,
    body: ReportConstraints,
    callbackUrl?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ReportData>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      customerId: [customerId, string()],
      body: [body, reportConstraintsSchema],
      callbackUrl: [callbackUrl, optional(string())],
    });
    req.header('Content-Type', 'application/json');
    req.query('callbackUrl', mapped.callbackUrl);
    req.json(mapped.body);
    req.appendTemplatePath`/decisioning/v2/customers/${mapped.customerId}/assetSummary`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.callAsJson(reportDataSchema, requestOptions);
  }
}
