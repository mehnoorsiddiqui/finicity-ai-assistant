/**
 * Finicity APIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { ErrorMessageError } from '../errors/errorMessageError';
import {
  CreatedCustomer,
  createdCustomerSchema,
} from '../models/createdCustomer';
import { Customer, customerSchema } from '../models/customer';
import { Customers, customersSchema } from '../models/customers';
import { CustomerUpdate, customerUpdateSchema } from '../models/customerUpdate';
import {
  CustomerWithAppData,
  customerWithAppDataSchema,
} from '../models/customerWithAppData';
import { NewCustomer, newCustomerSchema } from '../models/newCustomer';
import { number, optional, string } from '../schema';
import { BaseController } from './baseController';

export class CustomersController extends BaseController {
  /**
   * Enroll a testing customer ([Test Drive](https://signup.finicity.com/) accounts).
   *
   * For using Testing customers, register a test application with your systems engineer or account
   * manager. Then use that testing `applicationId` when creating testing customers. Testing customers
   * can only be assigned to testing OAuth applications and can only add accounts to Finbank OAuth for
   * testing OAuth implementation as well as other Finbank testing institutions.
   *
   * _Supported regions_: ![üá∫üá∏](https://flagcdn.com/20x15/us.png)
   *
   * @param body
   * @return Response from the API call
   */
  async addTestingCustomer(
    body: NewCustomer,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CreatedCustomer>> {
    const req = this.createRequest('POST', '/aggregation/v2/customers/testing');
    const mapped = req.prepareArgs({ body: [body, newCustomerSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    return req.callAsJson(createdCustomerSchema, requestOptions);
  }

  /**
   * Enroll an active customer, which is the actual owner of one or more real-world accounts. This is a
   * billable customer.
   *
   * _Supported regions_: ![üá∫üá∏](https://flagcdn.com/20x15/us.png)
   *
   * @param body
   * @return Response from the API call
   */
  async addCustomer(
    body: NewCustomer,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CreatedCustomer>> {
    const req = this.createRequest('POST', '/aggregation/v2/customers/active');
    const mapped = req.prepareArgs({ body: [body, newCustomerSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(429, ApiError, 'The service can\'t accept more requests or is not available from the [Test Drive](https://signup.finicity.com/).');
    return req.callAsJson(createdCustomerSchema, requestOptions);
  }

  /**
   * Find all customers enrolled by the current partner, where the search text is found in the customer's
   * username or any combination of `firstName` and `lastName` fields. If no search text is provided, all
   * customers will be returned.
   *
   * _Supported regions_: ![üá∫üá∏](https://flagcdn.com/20x15/us.png)
   *
   * @param username Username for exact match (will return 0 or 1 record)
   * @param type     "testing" or "active" to return only customers of that type, or leave empty to return
   *                           all customers.
   * @param search   The text you wish to match. Leave this empty if you wish to return all customers. Must
   *                           be URL-encoded (see also: [Handling Spaces in Queries](https://docs.finicity.
   *                           com/endpoint-syntax-and-format/)).
   * @param start    Index of the page of results to return
   * @param limit    Maximum number of results per page
   * @return Response from the API call
   */
  async getCustomers(
    username?: string,
    type?: string,
    search?: string,
    start?: number,
    limit?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Customers>> {
    const req = this.createRequest('GET', '/aggregation/v1/customers');
    const mapped = req.prepareArgs({
      username: [username, optional(string())],
      type: [type, optional(string())],
      search: [search, optional(string())],
      start: [start, optional(number())],
      limit: [limit, optional(number())],
    });
    req.query('username', mapped.username);
    req.query('type', mapped.type);
    req.query('search', mapped.search);
    req.query('start', mapped.start);
    req.query('limit', mapped.limit);
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    return req.callAsJson(customersSchema, requestOptions);
  }

  /**
   * Retrieve a customer along with additional details about the OAuth application.
   *
   * _Supported regions_: ![üá∫üá∏](https://flagcdn.com/20x15/us.png)
   *
   * @param customerId A Finicity customer ID
   * @return Response from the API call
   */
  async getCustomerWithAppData(
    customerId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CustomerWithAppData>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ customerId: [customerId, string()] });
    req.appendTemplatePath`/aggregation/v1/customers/${mapped.customerId}/application`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.callAsJson(customerWithAppDataSchema, requestOptions);
  }

  /**
   * Retrieve a customer by ID.
   *
   * _Supported regions_: ![üá∫üá∏](https://flagcdn.com/20x15/us.png)
   *
   * @param customerId A Finicity customer ID
   * @return Response from the API call
   */
  async getCustomer(
    customerId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Customer>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ customerId: [customerId, string()] });
    req.appendTemplatePath`/aggregation/v1/customers/${mapped.customerId}`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.callAsJson(customerSchema, requestOptions);
  }

  /**
   * Modify an enrolled customer by ID.
   *
   * _Supported regions_: ![üá∫üá∏](https://flagcdn.com/20x15/us.png)
   *
   * @param customerId   A Finicity customer ID
   * @param body
   * @return Response from the API call
   */
  async modifyCustomer(
    customerId: string,
    body: CustomerUpdate,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      customerId: [customerId, string()],
      body: [body, customerUpdateSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/aggregation/v1/customers/${mapped.customerId}`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.call(requestOptions);
  }

  /**
   * Completely remove a customer from the system. This will remove the customer and all associated
   * accounts and transactions.
   *
   * ‚ö†Ô∏è Use this service carefully! It will not pause for confirmation before performing the operation!
   *
   * _Supported regions_: ![üá∫üá∏](https://flagcdn.com/20x15/us.png)
   *
   * @param customerId A Finicity customer ID
   * @return Response from the API call
   */
  async deleteCustomer(
    customerId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ customerId: [customerId, string()] });
    req.appendTemplatePath`/aggregation/v1/customers/${mapped.customerId}`;
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.call(requestOptions);
  }
}
