/**
 * Finicity APIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ErrorMessageError } from '../errors/errorMessageError';
import {
  PayrollReportConstraints,
  payrollReportConstraintsSchema,
} from '../models/payrollReportConstraints';
import {
  PayrollReportData,
  payrollReportDataSchema,
} from '../models/payrollReportData';
import {
  PayStatementReportConstraints,
  payStatementReportConstraintsSchema,
} from '../models/payStatementReportConstraints';
import {
  PayStatementReportData,
  payStatementReportDataSchema,
} from '../models/payStatementReportData';
import {
  ReportConstraints,
  reportConstraintsSchema,
} from '../models/reportConstraints';
import { ReportData, reportDataSchema } from '../models/reportData';
import {
  VOETransactionsReportConstraints,
  vOETransactionsReportConstraintsSchema,
} from '../models/vOETransactionsReportConstraints';
import {
  VOETransactionsReportData,
  vOETransactionsReportDataSchema,
} from '../models/vOETransactionsReportData';
import {
  VOIEPaystubWithStatementReportData,
  vOIEPaystubWithStatementReportDataSchema,
} from '../models/vOIEPaystubWithStatementReportData';
import {
  VOIEPaystubWithTXVerifyReportData,
  vOIEPaystubWithTXVerifyReportDataSchema,
} from '../models/vOIEPaystubWithTXVerifyReportData';
import {
  VOIEWithStatementReportConstraints,
  vOIEWithStatementReportConstraintsSchema,
} from '../models/vOIEWithStatementReportConstraints';
import {
  VOIEWithTXVerifyReportConstraints,
  vOIEWithTXVerifyReportConstraintsSchema,
} from '../models/vOIEWithTXVerifyReportConstraints';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class VerifyIncomeAndEmploymentController extends BaseController {
  /**
   * Generate a Verification of Income (VOI) report for all checking, savings, and money market accounts
   * for the given customer. This service retrieves up to two years of transaction history for each
   * account and uses this information to generate the VOI report.
   *
   * This is a premium service. The billing rate is the variable rate for Verification of Income under
   * the current subscription plan. The billable event is the successful generation of a VOI report.
   *
   * If no account of type checking, savings, or money market is found, the service will return HTTP 400
   * Bad Request.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param customerId   A Finicity customer ID
   * @param body
   * @param callbackUrl  A Report Listener URL to receive notifications. The webhook must
   *                                                 respond to the Finicity API with 2xx HTTP status code.
   * @return Response from the API call
   */
  async generateVOIReport(
    customerId: string,
    body: ReportConstraints,
    callbackUrl?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ReportData>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      customerId: [customerId, string()],
      body: [body, reportConstraintsSchema],
      callbackUrl: [callbackUrl, optional(string())],
    });
    req.header('Content-Type', 'application/json');
    req.query('callbackUrl', mapped.callbackUrl);
    req.json(mapped.body);
    req.appendTemplatePath`/decisioning/v2/customers/${mapped.customerId}/voi`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.callAsJson(reportDataSchema, requestOptions);
  }

  /**
   * Premium Service: A billable event when the API response is successful.
   *
   * MVS Implementation Options: Direct API Integration.
   *
   * Used as a complementary report to the VOIE-Payroll report. This report is used to fulfill the pre-
   * close VOE requirements. It retrieves the customer's employment details and employment status through
   * the payroll source without any income information.
   *
   * To generate this report, pass the values from the customer `SSN`, `DOB`, and the `reportId` from the
   * first VOIE-Payroll report generated after the Connect session.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param customerId   A Finicity customer ID
   * @param body
   * @param callbackUrl  A Report Listener URL to receive notifications. The
   *                                                        webhook must respond to the Finicity API with 2xx HTTP
   *                                                        status code.
   * @return Response from the API call
   */
  async generateVOEPayrollReport(
    customerId: string,
    body: PayrollReportConstraints,
    callbackUrl?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PayrollReportData>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      customerId: [customerId, string()],
      body: [body, payrollReportConstraintsSchema],
      callbackUrl: [callbackUrl, optional(string())],
    });
    req.header('Content-Type', 'application/json');
    req.query('callbackUrl', mapped.callbackUrl);
    req.json(mapped.body);
    req.appendTemplatePath`/decisioning/v2/customers/${mapped.customerId}/voePayroll`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.callAsJson(payrollReportDataSchema, requestOptions);
  }

  /**
   * Premium Service: A billable event when the API response is successful.
   *
   * MVS-Direct integration developers only.
   *
   * Used as a complimentary report to the VOA with Income and VOIE - Paystub (with TXVerify) reports and
   * used to fulfill the pre-close VOE requirements.
   *
   * Retrieve the latest credit transaction information from the borrower's connected bank accounts and
   * groups them into income streams so that you can view their payment history to ensure a direct deport
   * was made within the expected cadence. The report displays transaction descriptions without any
   * dollar amounts so that income re-verification isn't necessary.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param customerId   A Finicity customer ID
   * @param body
   * @param callbackUrl  A Report Listener URL to receive notifications.
   *                                                                The webhook must respond to the Finicity API with
   *                                                                2xx HTTP status code.
   * @return Response from the API call
   */
  async generateVOETransactionsReport(
    customerId: string,
    body: VOETransactionsReportConstraints,
    callbackUrl?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<VOETransactionsReportData>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      customerId: [customerId, string()],
      body: [body, vOETransactionsReportConstraintsSchema],
      callbackUrl: [callbackUrl, optional(string())],
    });
    req.header('Content-Type', 'application/json');
    req.query('callbackUrl', mapped.callbackUrl);
    req.json(mapped.body);
    req.appendTemplatePath`/decisioning/v2/customers/${mapped.customerId}/voeTransactions`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.callAsJson(vOETransactionsReportDataSchema, requestOptions);
  }

  /**
   * Generate Pay Statement Extraction Report for the given customer. This service accepts asset IDs of
   * the stored pay statements to generate a Pay Statement Extraction Report.
   *
   * This is a premium service. The billing rate is the variable rate for Pay Statement Extraction Report
   * under the current subscription plan. The billable event is the successful generation of a Pay
   * Statement Extraction Report.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param customerId   A Finicity customer ID
   * @param body
   * @param callbackUrl  A Report Listener URL to receive notifications. The
   *                                                             webhook must respond to the Finicity API with 2xx HTTP
   *                                                             status code.
   * @return Response from the API call
   */
  async generatePayStatementReport(
    customerId: string,
    body: PayStatementReportConstraints,
    callbackUrl?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PayStatementReportData>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      customerId: [customerId, string()],
      body: [body, payStatementReportConstraintsSchema],
      callbackUrl: [callbackUrl, optional(string())],
    });
    req.header('Content-Type', 'application/json');
    req.query('callbackUrl', mapped.callbackUrl);
    req.json(mapped.body);
    req.appendTemplatePath`/decisioning/v2/customers/${mapped.customerId}/payStatement`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.callAsJson(payStatementReportDataSchema, requestOptions);
  }

  /**
   * Generate a VOIE - Paystub (with TXVerify) report for all checking and savings under the given
   * customer. This service retrieves up to two years of transaction history for the given accounts. It
   * then uses this information as well as the provided paystub(s), which are passed into the request
   * body as asset IDs (generated using the Store Customer Pay Statement API) to generate the VOIE -
   * Paystub (with TXVerify) report.
   *
   * Note: if you are using this endpoint to refresh the bank transactions, use the same asset ID from
   * the first report. A new paystub is not required unless the paystub is too old for underwriting
   * requirements. Using the same asset ID that was on the original report and the previously extracted
   * details will be used to speed up report generation response time.
   *
   * This is a premium service. The billing rate is the variable rate for VOIE TXVerify under the current
   * subscription plan. The billable event is the successful generation of a VOIE TXVerify Report.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param customerId   A Finicity customer ID
   * @param body
   * @param callbackUrl  A Report Listener URL to receive notifications.
   *                                                                 The webhook must respond to the Finicity API with
   *                                                                 2xx HTTP status code.
   * @return Response from the API call
   */
  async generateVOIEPaystubWithTXVerifyReport(
    customerId: string,
    body: VOIEWithTXVerifyReportConstraints,
    callbackUrl?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<VOIEPaystubWithTXVerifyReportData>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      customerId: [customerId, string()],
      body: [body, vOIEWithTXVerifyReportConstraintsSchema],
      callbackUrl: [callbackUrl, optional(string())],
    });
    req.header('Content-Type', 'application/json');
    req.query('callbackUrl', mapped.callbackUrl);
    req.json(mapped.body);
    req.appendTemplatePath`/decisioning/v2/customers/${mapped.customerId}/voieTxVerify/withInterview`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.callAsJson(
      vOIEPaystubWithTXVerifyReportDataSchema,
      requestOptions
    );
  }

  /**
   * Generate a VOIE - Paystub report. This service uses the provided paystub(s), which are passed into
   * the request body as asset IDs (generated using the "Store Customer Pay Statement" API) to generate
   * the VOIE - Paystub report with digitized paystub details.
   *
   * This is a premium service. The billing rate is the variable rate for VOIE - Paystub under the
   * current subscription plan. The billable event is the successful generation of a VOIE - Paystub
   * Report.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param customerId   A Finicity customer ID
   * @param body
   * @param callbackUrl  A Report Listener URL to receive notifications.
   *                                                                  The webhook must respond to the Finicity API with
   *                                                                  2xx HTTP status code.
   * @return Response from the API call
   */
  async generateVOIEPaystubReport(
    customerId: string,
    body: VOIEWithStatementReportConstraints,
    callbackUrl?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<VOIEPaystubWithStatementReportData>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      customerId: [customerId, string()],
      body: [body, vOIEWithStatementReportConstraintsSchema],
      callbackUrl: [callbackUrl, optional(string())],
    });
    req.header('Content-Type', 'application/json');
    req.query('callbackUrl', mapped.callbackUrl);
    req.json(mapped.body);
    req.appendTemplatePath`/decisioning/v2/customers/${mapped.customerId}/voieTxVerify/withStatement`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.callAsJson(
      vOIEPaystubWithStatementReportDataSchema,
      requestOptions
    );
  }

  /**
   * The VOIE â€“ Payroll report generates when the customer completes Connect. Lenders, who commonly use
   * this report for pre-close verification employment check, can refresh this report by passing the
   * consumer's SSN, DOB, and the `reportId` from the first VOIE â€“ Payroll report they received.
   *
   * We'll refresh this report and update any new pay histories since the first report generated,
   * including borrower's employment status as active or not.
   *
   * Note: lenders can only refresh this report one time in a 60-day period starting from the date of the
   * first report. Any further report refreshes will incur additional charges.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param customerId   A Finicity customer ID
   * @param body
   * @param callbackUrl  A Report Listener URL to receive notifications. The
   *                                                        webhook must respond to the Finicity API with 2xx HTTP
   *                                                        status code.
   * @return Response from the API call
   */
  async refreshVOIEPayrollReport(
    customerId: string,
    body: PayrollReportConstraints,
    callbackUrl?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PayrollReportData>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      customerId: [customerId, string()],
      body: [body, payrollReportConstraintsSchema],
      callbackUrl: [callbackUrl, optional(string())],
    });
    req.header('Content-Type', 'application/json');
    req.query('callbackUrl', mapped.callbackUrl);
    req.json(mapped.body);
    req.appendTemplatePath`/decisioning/v2/customers/${mapped.customerId}/voiePayroll`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.callAsJson(payrollReportDataSchema, requestOptions);
  }
}
