/**
 * Finicity APIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { ErrorMessageError } from '../errors/errorMessageError';
import {
  AuditableReport,
  auditableReportSchema,
} from '../models/auditableReport';
import {
  PrequalificationReport,
  prequalificationReportSchema,
} from '../models/prequalificationReport';
import {
  ReportSummaries,
  reportSummariesSchema,
} from '../models/reportSummaries';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class ReportsController extends BaseController {
  /**
   * Get a report that has been generated by calling one of the "Generate Report" services.
   *
   * The report's status field will contain `inProgress`, `failure`, or `success`. If the status shows
   * `inProgress`, the client app should wait 20 seconds and then call this endpoint again.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param customerId A Finicity customer ID
   * @param reportId   Finicity's ID of the report
   * @param onBehalfOf The name of the entity you are retrieving the report on behalf of
   * @param purpose    2-digit code from [Permissible Purpose Codes](https://docs.finicity.com/permissible-
   *                             purpose-codes/), specifying the reason for retrieving this report.
   * @return Response from the API call
   */
  async getPrequalificationReportByCustomer(
    customerId: string,
    reportId: string,
    onBehalfOf: string,
    purpose?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PrequalificationReport>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      customerId: [customerId, string()],
      reportId: [reportId, string()],
      onBehalfOf: [onBehalfOf, string()],
      purpose: [purpose, optional(string())],
    });
    req.query('onBehalfOf', mapped.onBehalfOf);
    req.query('purpose', mapped.purpose);
    req.appendTemplatePath`/decisioning/v3/customers/${mapped.customerId}/reports/${mapped.reportId}`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.callAsJson(prequalificationReportSchema, requestOptions);
  }

  /**
   * Get all reports that have been generated by calling one of the "Generate Report" services for the
   * given customer.
   *
   * The report's status field will contain `inProgress`, `failure`, or `success`. If the status shows
   * `inProgress`, the client app should wait 20 seconds and then call this endpoint again.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param customerId A Finicity customer ID
   * @param purpose    2-digit code from [Permissible Purpose Codes](https://docs.finicity.com/permissible-
   *                             purpose-codes/), specifying the reason for retrieving this report.
   * @return Response from the API call
   */
  async getReportsByCustomer(
    customerId: string,
    purpose?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ReportSummaries>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      customerId: [customerId, string()],
      purpose: [purpose, optional(string())],
    });
    req.query('purpose', mapped.purpose);
    req.appendTemplatePath`/decisioning/v1/customers/${mapped.customerId}/reports`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    req.throwOn(429, ApiError, 'The service can\'t accept more requests or is not available from the [Test Drive](https://signup.finicity.com/).');
    return req.callAsJson(reportSummariesSchema, requestOptions);
  }

  /**
   * Get a report that has been generated by calling one of the "Generate Report" services.
   *
   * The report's status field will contain `inProgress`, `failure`, or `success`. If the status shows
   * `inProgress`, the client app should wait 20 seconds and then call this endpoint again.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param consumerId The consumer ID
   * @param purpose    2-digit code from [Permissible Purpose Codes](https://docs.finicity.com/permissible-
   *                             purpose-codes/), specifying the reason for retrieving this report.
   * @return Response from the API call
   */
  async getReportsByConsumer(
    consumerId: string,
    purpose?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ReportSummaries>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      consumerId: [consumerId, string()],
      purpose: [purpose, optional(string())],
    });
    req.query('purpose', mapped.purpose);
    req.appendTemplatePath`/decisioning/v1/consumers/${mapped.consumerId}/reports`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    req.throwOn(429, ApiError, 'The service can\'t accept more requests or is not available from the [Test Drive](https://signup.finicity.com/).');
    return req.callAsJson(reportSummariesSchema, requestOptions);
  }

  /**
   * Get a report that has been generated by calling one of the "Generate Report" services.
   *
   * The report's status field will contain `inProgress`, `failure`, or `success`. If the status shows
   * `inProgress`, the client app should wait 20 seconds and then call this endpoint again.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param consumerId The consumer ID
   * @param reportId   Finicity's ID of the report
   * @param onBehalfOf The name of the entity you are retrieving the report on behalf of
   * @param purpose    2-digit code from [Permissible Purpose Codes](https://docs.finicity.com/permissible-
   *                             purpose-codes/), specifying the reason for retrieving this report.
   * @return Response from the API call
   */
  async getReportByConsumer(
    consumerId: string,
    reportId: string,
    onBehalfOf: string,
    purpose?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AuditableReport>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      consumerId: [consumerId, string()],
      reportId: [reportId, string()],
      onBehalfOf: [onBehalfOf, string()],
      purpose: [purpose, optional(string())],
    });
    req.query('onBehalfOf', mapped.onBehalfOf);
    req.query('purpose', mapped.purpose);
    req.appendTemplatePath`/decisioning/v3/consumers/${mapped.consumerId}/reports/${mapped.reportId}`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.callAsJson(auditableReportSchema, requestOptions);
  }
}
