/**
 * Finicity APIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ErrorMessageError } from '../errors/errorMessageError';
import {
  ReportConstraints,
  reportConstraintsSchema,
} from '../models/reportConstraints';
import { ReportData, reportDataSchema } from '../models/reportData';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class CashFlowController extends BaseController {
  /**
   * Generate a Cash Flow Report (Business) report for all checking and savings under the given customer.
   * This service retrieves up to two years of transaction history for the given account. It then uses
   * this information to generate the CFR report. A consumer is not required to generate this report.
   *
   * This report is not provided under FCRA rules, and this report is not available in the Finicity
   * Consumer Portal for the borrower to view.
   *
   * If no account of type checking or savings is found, the service will return HTTP 400 Bad Request.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param customerId   A Finicity customer ID
   * @param body
   * @param callbackUrl  A Report Listener URL to receive notifications. The webhook must
   *                                                 respond to the Finicity API with 2xx HTTP status code.
   * @return Response from the API call
   */
  async generateCashFlowBusinessReport(
    customerId: string,
    body: ReportConstraints,
    callbackUrl?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ReportData>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      customerId: [customerId, string()],
      body: [body, reportConstraintsSchema],
      callbackUrl: [callbackUrl, optional(string())],
    });
    req.header('Content-Type', 'application/json');
    req.query('callbackUrl', mapped.callbackUrl);
    req.json(mapped.body);
    req.appendTemplatePath`/decisioning/v2/customers/${mapped.customerId}/cashFlowBusiness`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.callAsJson(reportDataSchema, requestOptions);
  }

  /**
   * Generate a Cash Flow Report (Personal) report for all checking and savings under the given customer.
   * This service retrieves up to two years of transaction history for the given account. It then uses
   * this information to generate the CFR report.
   *
   * This report is provided under FCRA rules, with Finicity acting as the CRA (Consumer Reporting
   * Agency). If an individual account is included in the report - for example, with an individual acting
   * as an personal guarantor on the loan - then this version of the report should be used. In case of an
   * adverse action on the loan where the decision was based on this report, then the borrower can be
   * referred to the [Finicity Consumer Portal](https://consumer.finicityreports.com) where they can view
   * this report and submit a dispute if they feel any information in this report is inaccurate.
   *
   * A report consumer must be created for the given customer before calling this API (see "Consumers").
   *
   * If no account of type checking or savings is found, the service will return HTTP 400 Bad Request.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param customerId   A Finicity customer ID
   * @param body
   * @param callbackUrl  A Report Listener URL to receive notifications. The webhook must
   *                                                 respond to the Finicity API with 2xx HTTP status code.
   * @return Response from the API call
   */
  async generateCashFlowPersonalReport(
    customerId: string,
    body: ReportConstraints,
    callbackUrl?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ReportData>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      customerId: [customerId, string()],
      body: [body, reportConstraintsSchema],
      callbackUrl: [callbackUrl, optional(string())],
    });
    req.header('Content-Type', 'application/json');
    req.query('callbackUrl', mapped.callbackUrl);
    req.json(mapped.body);
    req.appendTemplatePath`/decisioning/v2/customers/${mapped.customerId}/cashFlowPersonal`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.callAsJson(reportDataSchema, requestOptions);
  }
}
