/**
 * Finicity APIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ErrorMessageError } from '../errors/errorMessageError';
import { Application, applicationSchema } from '../models/application';
import { AppStatuses, appStatusesSchema } from '../models/appStatuses';
import {
  CustomerAccounts,
  customerAccountsSchema,
} from '../models/customerAccounts';
import {
  RegisteredApplication,
  registeredApplicationSchema,
} from '../models/registeredApplication';
import { bigint, number, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class AppRegistrationController extends BaseController {
  /**
   * Register a new application to access financial institutions using OAuth connections.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param body
   * @return Response from the API call
   */
  async registerApp(
    body: Application,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<RegisteredApplication>> {
    const req = this.createRequest(
      'POST',
      '/aggregation/v1/partners/applications'
    );
    const mapped = req.prepareArgs({ body: [body, applicationSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    return req.callAsJson(registeredApplicationSchema, requestOptions);
  }

  /**
   * Update a registered application.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param preAppId     The application registration tracking ID
   * @param body
   * @return Response from the API call
   */
  async modifyAppRegistration(
    preAppId: string,
    body: Application,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<RegisteredApplication>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      preAppId: [preAppId, string()],
      body: [body, applicationSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/aggregation/v1/partners/applications/${mapped.preAppId}`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.callAsJson(registeredApplicationSchema, requestOptions);
  }

  /**
   * Get the status of your application registration(s).
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param preAppId      The application registration tracking ID
   * @param applicationId The application ID
   * @param status        Look up app registration requests by status
   * @param appName       Look up app registration requests by app name
   * @param submittedDate Look up app registration requests by the date they were submitted
   * @param modifiedDate  Look up app registration requests by the date the request was updated. This can be
   *                                used to determine when a request was updated to "A" or "R".
   * @param page          Index of the page of results to return
   * @param pageSize      Maximum number of results per page
   * @return Response from the API call
   */
  async getAppRegistrationStatus(
    preAppId?: string,
    applicationId?: string,
    status?: string,
    appName?: string,
    submittedDate?: bigint,
    modifiedDate?: bigint,
    page?: number,
    pageSize?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AppStatuses>> {
    const req = this.createRequest(
      'GET',
      '/aggregation/v2/partners/applications'
    );
    const mapped = req.prepareArgs({
      preAppId: [preAppId, optional(string())],
      applicationId: [applicationId, optional(string())],
      status: [status, optional(string())],
      appName: [appName, optional(string())],
      submittedDate: [submittedDate, optional(bigint())],
      modifiedDate: [modifiedDate, optional(bigint())],
      page: [page, optional(number())],
      pageSize: [pageSize, optional(number())],
    });
    req.query('preAppId', mapped.preAppId);
    req.query('applicationId', mapped.applicationId);
    req.query('status', mapped.status);
    req.query('appName', mapped.appName);
    req.query('submittedDate', mapped.submittedDate);
    req.query('modifiedDate', mapped.modifiedDate);
    req.query('page', mapped.page);
    req.query('pageSize', mapped.pageSize);
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.callAsJson(appStatusesSchema, requestOptions);
  }

  /**
   * If you have multiple applications for a single client, and you want to register their applications
   * to access financial institutions using OAuth connections, then use this API to assign applications
   * to an existing customer.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param customerId    A Finicity customer ID
   * @param applicationId The application ID
   * @param body          No payload expected
   * @return Response from the API call
   */
  async setCustomerAppID(
    customerId: string,
    applicationId: string,
    body?: unknown,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      customerId: [customerId, string()],
      applicationId: [applicationId, string()],
      body: [body, optional(unknown())],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/aggregation/v1/customers/${mapped.customerId}/applications/${mapped.applicationId}`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.call(requestOptions);
  }

  /**
   * The `institutionLoginId` parameter uses Finicity's internal FI mapping to move accounts from the
   * current FI legacy connection to the new OAuth FI connection.
   *
   * This API returns a list of accounts for the given institution login ID.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param customerId         A Finicity customer ID
   * @param institutionLoginId The institution login ID
   * @param body               No payload expected
   * @return Response from the API call
   */
  async migrateInstitutionLoginAccounts(
    customerId: string,
    institutionLoginId: string,
    body: unknown,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CustomerAccounts>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      customerId: [customerId, string()],
      institutionLoginId: [institutionLoginId, string()],
      body: [body, optional(unknown())],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/aggregation/v2/customers/${mapped.customerId}/institutionLogins/${mapped.institutionLoginId}/migration`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.callAsJson(customerAccountsSchema, requestOptions);
  }
}
