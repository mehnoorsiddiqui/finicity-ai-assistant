/**
 * Finicity APIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ErrorMessageError } from '../errors/errorMessageError';
import {
  StatementReportConstraints,
  statementReportConstraintsSchema,
} from '../models/statementReportConstraints';
import {
  StatementReportData,
  statementReportDataSchema,
} from '../models/statementReportData';
import { number, optional, string } from '../schema';
import { BaseController } from './baseController';

export class BankStatementsController extends BaseController {
  /**
   * Retrieve the customer's bank statements in PDF format. Up to 24 months of history is available
   * depending on the financial institution. Since this is a premium service, charges incur per each
   * successful statement retrieved.
   *
   * Our list of [Supported Institutions](https://docs.finicity.com/institutions/) confirms that you can
   * retrieve statements for the following account types:
   * * Checking
   * * Savings
   * * Money market
   * * CDs
   * * Investments
   * * Mortgage
   * * Credit cards
   * * Loans
   * * Line of credit
   *
   * Note: setting the timeout to 180 seconds is recommended to allow enough time for a response.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param customerId A Finicity customer ID
   * @param accountId  The account ID
   * @param index      Request statements from 1-24. By default, 1 is the most recent statement. Increase
   *                             the index value to count back (by month) and retrieve its most recent statement.
   * @return Response from the API call
   */
  async getCustomerAccountStatement(
    customerId: string,
    accountId: string,
    index?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<NodeJS.ReadableStream | Blob>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      customerId: [customerId, string()],
      accountId: [accountId, string()],
      index: [index, optional(number())],
    });
    req.query('index', mapped.index);
    req.appendTemplatePath`/aggregation/v1/customers/${mapped.customerId}/accounts/${mapped.accountId}/statement`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.callAsStream(requestOptions);
  }

  /**
   * Generate a Statement Report report for the given accounts under the given customer.
   *
   * This is a premium service. A billable event will be created upon the successful generation of the
   * Statement Report.
   *
   * A report consumer must be created for the given customer before calling this API (see "Consumers").
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param customerId   A Finicity customer ID
   * @param body
   * @param callbackUrl  A Report Listener URL to receive notifications. The
   *                                                          webhook must respond to the Finicity API with 2xx HTTP
   *                                                          status code.
   * @return Response from the API call
   */
  async generateStatementReport(
    customerId: string,
    body: StatementReportConstraints,
    callbackUrl?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<StatementReportData>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      customerId: [customerId, string()],
      body: [body, statementReportConstraintsSchema],
      callbackUrl: [callbackUrl, optional(string())],
    });
    req.header('Content-Type', 'application/json');
    req.query('callbackUrl', mapped.callbackUrl);
    req.json(mapped.body);
    req.appendTemplatePath`/decisioning/v2/customers/${mapped.customerId}/statement`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.callAsJson(statementReportDataSchema, requestOptions);
  }
}
