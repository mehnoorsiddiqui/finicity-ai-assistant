/**
 * Finicity APIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ErrorMessageError } from '../errors/errorMessageError';
import { AccessToken, accessTokenSchema } from '../models/accessToken';
import {
  PartnerCredentials,
  partnerCredentialsSchema,
} from '../models/partnerCredentials';
import {
  PartnerCredentialsWithNewSecret,
  partnerCredentialsWithNewSecretSchema,
} from '../models/partnerCredentialsWithNewSecret';
import { BaseController } from './baseController';

export class AuthenticationController extends BaseController {
  /**
   * Send Partner ID and Partner Secret to the Partner Authentication service to obtain a token for
   * accessing Finicity APIs.
   * * The token is valid for two hours and is required on all calls to the Finicity APIs
   * * As a best practice, use a single token for all calls. Assign a timestamp for each token, and then
   * check the current timestamp before making any calls. If the token is greater than 90 minutes,
   * generate a new one.
   * * ‚ö†Ô∏è After five failed attempts to authenticate, your account will be locked. Contact
   * [support@finicity.com](mailto:support@finicity.com) to get help resetting your account.
   *
   * _Supported regions_: ![üá∫üá∏](https://flagcdn.com/20x15/us.png)
   *
   * @param body
   * @return Response from the API call
   */
  async createToken(
    body: PartnerCredentials,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AccessToken>> {
    const req = this.createRequest(
      'POST',
      '/aggregation/v2/partners/authentication'
    );
    const mapped = req.prepareArgs({ body: [body, partnerCredentialsSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check Partner ID, Partner Secret or Finicity-App-Key.');
    return req.callAsJson(accessTokenSchema, requestOptions);
  }

  /**
   * Change the Partner Secret used to authenticate this partner.
   *
   * The secret does not expire, but can be changed by calling this endpoint. A valid Partner Secret may
   * contain upper and lowercase characters, numbers, and the characters !, @, #, $, %, &, *, _, -, +. It
   * must include at least one number and at least one letter, and its length should be between 12 and
   * 255 characters.
   *
   * _Supported regions_: ![üá∫üá∏](https://flagcdn.com/20x15/us.png)
   *
   * @param body
   * @return Response from the API call
   */
  async modifyPartnerSecret(
    body: PartnerCredentialsWithNewSecret,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'PUT',
      '/aggregation/v2/partners/authentication'
    );
    const mapped = req.prepareArgs({
      body: [body, partnerCredentialsWithNewSecretSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check Partner ID, Partner Secret or Finicity-App-Key.');
    return req.call(requestOptions);
  }
}
