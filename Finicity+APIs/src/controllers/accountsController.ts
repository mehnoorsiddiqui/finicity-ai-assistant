/**
 * Finicity APIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ErrorMessageError } from '../errors/errorMessageError';
import { AccountOwner, accountOwnerSchema } from '../models/accountOwner';
import {
  CustomerAccount,
  customerAccountSchema,
} from '../models/customerAccount';
import {
  CustomerAccounts,
  customerAccountsSchema,
} from '../models/customerAccounts';
import { optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class AccountsController extends BaseController {
  /**
   * Get all accounts associated with the given institution login. All accounts returned are accessible
   * by a single set of credentials on a single institution.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param customerId         A Finicity customer ID
   * @param institutionLoginId The institution login ID
   * @return Response from the API call
   */
  async getCustomerAccountsByInstitutionLogin(
    customerId: string,
    institutionLoginId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CustomerAccounts>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      customerId: [customerId, string()],
      institutionLoginId: [institutionLoginId, string()],
    });
    req.appendTemplatePath`/aggregation/v1/customers/${mapped.customerId}/institutionLogins/${mapped.institutionLoginId}/accounts`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.callAsJson(customerAccountsSchema, requestOptions);
  }

  /**
   * Refresh account and transaction data for all accounts associated with a given `institutionLoginId`
   * with a connection to the institution.
   *
   * Client apps are not permitted to automate calls to the "Refresh" services. Active accounts are
   * automatically refreshed by Finicity once per day. Because many financial institutions only post
   * transactions once per day, calling Refresh repeatedly is usually a waste of resources and is not
   * recommended.
   *
   * Apps may call "Refresh" services for a specific customer when there is a specific business case for
   * the need of data that is up to date as of the moment. Please discuss with your account manager and
   * systems engineer for further clarification.
   *
   * The recommended timeout setting for this request is 120 seconds in order to receive a response.
   * However, you can terminate the connection after making the call the operation will still complete.
   * You will have to pull the account records to check for an updated aggregation attempt date to know
   * when the refresh is complete.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param customerId         A Finicity customer ID
   * @param institutionLoginId The institution login ID
   * @param body               No payload expected
   * @return Response from the API call
   */
  async refreshCustomerAccountsByInstitutionLogin(
    customerId: string,
    institutionLoginId: string,
    body?: unknown,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CustomerAccounts>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      customerId: [customerId, string()],
      institutionLoginId: [institutionLoginId, string()],
      body: [body, optional(unknown())],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/aggregation/v1/customers/${mapped.customerId}/institutionLogins/${mapped.institutionLoginId}/accounts`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.callAsJson(customerAccountsSchema, requestOptions);
  }

  /**
   * Remove from the Finicity system the set of accounts matching the institution login ID.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param customerId         A Finicity customer ID
   * @param institutionLoginId The institution login ID
   * @return Response from the API call
   */
  async deleteCustomerAccountsByInstitutionLogin(
    customerId: string,
    institutionLoginId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      customerId: [customerId, string()],
      institutionLoginId: [institutionLoginId, string()],
    });
    req.appendTemplatePath`/aggregation/v1/customers/${mapped.customerId}/institutionLogins/${mapped.institutionLoginId}`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.call(requestOptions);
  }

  /**
   * Get a customer account by ID.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param customerId A Finicity customer ID
   * @param accountId  The account ID
   * @return Response from the API call
   */
  async getCustomerAccount(
    customerId: string,
    accountId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CustomerAccount>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      customerId: [customerId, string()],
      accountId: [accountId, string()],
    });
    req.appendTemplatePath`/aggregation/v1/customers/${mapped.customerId}/accounts/${mapped.accountId}`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.callAsJson(customerAccountSchema, requestOptions);
  }

  /**
   * Remove the given account from the Finicity system.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param customerId A Finicity customer ID
   * @param accountId  The account ID
   * @return Response from the API call
   */
  async deleteCustomerAccount(
    customerId: string,
    accountId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      customerId: [customerId, string()],
      accountId: [accountId, string()],
    });
    req.appendTemplatePath`/aggregation/v1/customers/${mapped.customerId}/accounts/${mapped.accountId}`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.call(requestOptions);
  }

  /**
   * Get all accounts owned by the given customer.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param customerId A Finicity customer ID
   * @param status     A filter to fetch account in the given status
   * @return Response from the API call
   */
  async getCustomerAccounts(
    customerId: string,
    status?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CustomerAccounts>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      customerId: [customerId, string()],
      status: [status, optional(string())],
    });
    req.query('status', mapped.status);
    req.appendTemplatePath`/aggregation/v1/customers/${mapped.customerId}/accounts`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.callAsJson(customerAccountsSchema, requestOptions);
  }

  /**
   * Refresh account and transaction data for all accounts associated with the  given `customerId` with a
   * connection to the institution.
   *
   * Client apps are not permitted to automate calls to the "Refresh" services. Active accounts are
   * automatically refreshed by Finicity once per day. Because many financial institutions only post
   * transactions once per day, calling Refresh repeatedly is usually a waste of resources and is not
   * recommended.
   *
   * Apps may call "Refresh" services for a specific customer when there is a specific business case for
   * the need of data that is up to date as of the moment. Please discuss with your account manager and
   * systems engineer for further clarification.
   *
   * The recommended timeout setting for this request is 120 seconds in order to receive a response.
   * However, you can terminate the connection after making the call the operation will still complete.
   * You will have to pull the account records to check for an updated aggregation attempt date to know
   * when the refresh is complete.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param customerId   A Finicity customer ID
   * @param body         No payload expected
   * @return Response from the API call
   */
  async refreshCustomerAccounts(
    customerId: string,
    body?: unknown,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CustomerAccounts>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      customerId: [customerId, string()],
      body: [body, optional(unknown())],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/aggregation/v1/customers/${mapped.customerId}/accounts`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.callAsJson(customerAccountsSchema, requestOptions);
  }

  /**
   * Get all active accounts owned by the given customer at the given institution.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param customerId    A Finicity customer ID
   * @param institutionId The institution ID
   * @return Response from the API call
   */
  async getCustomerAccountsByInstitution(
    customerId: string,
    institutionId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CustomerAccounts>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      customerId: [customerId, string()],
      institutionId: [institutionId, string()],
    });
    req.appendTemplatePath`/aggregation/v1/customers/${mapped.customerId}/institutions/${mapped.institutionId}/accounts`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.callAsJson(customerAccountsSchema, requestOptions);
  }

  /**
   * Connect to the account's financial institution and load up to 24 months of historic transactions for
   * the account. Length of history varies by institution.
   *
   * This is a premium service. The billable event is a call to this service specifying a customer ID
   * that has not been seen before by this service. (If this service is called multiple times with the
   * same customer ID, to load transactions from multiple accounts, only one billable event has occurred.
   * )
   *
   * The recommended timeout setting for this request is 180 seconds in order to receive a response.
   * However, you can terminate the connection after making the call the operation will still complete.
   * You will have to pull the account records to check for an updated aggregation attempt date to know
   * when the refresh is complete.
   *
   * The date range sent to the institution is calculated from the account's `createdDate`. This means
   * that calling this service a second time for the same account normally will not add any new
   * transactions for the account. For this reason, a second call to this service for a known account ID
   * will usually return immediately.
   *
   * In a few specific scenarios, it may be desirable to force a second connection to the institution for
   * a known account ID. Some examples are:
   *
   * * The institution's policy has changed, making more transactions available
   * * Finicity has now added a longer transaction history support for the institution
   * * The first call encountered an error, and the resulting Aggregation Ticket has now been fixed by
   * the Finicity Support Team
   *
   * In these cases, the POST request can contain the parameter `force=true` in the request body to force
   * the second connection.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param customerId   A Finicity customer ID
   * @param accountId    The account ID
   * @param body         No payload expected
   * @return Response from the API call
   */
  async loadHistoricTransactionsForCustomerAccount(
    customerId: string,
    accountId: string,
    body?: unknown,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      customerId: [customerId, string()],
      accountId: [accountId, string()],
      body: [body, optional(unknown())],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/aggregation/v1/customers/${mapped.customerId}/accounts/${mapped.accountId}/transactions/historic`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.call(requestOptions);
  }

  /**
   * Retrieve the names and addresses of the account owner from a financial institution.
   *
   * Note: this is a premium service, billable per every successful API call.
   *
   * This service retrieves account data from the institution. This usually returns quickly, but in some
   * scenarios may take a few minutes to complete. In the event of a timeout condition, retry the call.
   *
   * _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
   *
   * @param customerId A Finicity customer ID
   * @param accountId  The account ID
   * @return Response from the API call
   */
  async getAccountOwner(
    customerId: string,
    accountId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AccountOwner>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      customerId: [customerId, string()],
      accountId: [accountId, string()],
    });
    req.appendTemplatePath`/aggregation/v1/customers/${mapped.customerId}/accounts/${mapped.accountId}/owner`;
    req.throwOn(400, ErrorMessageError, 'The request was rejected');
    req.throwOn(401, ErrorMessageError, 'The request lacks valid authentication credentials. Check "Finicity-App-Key" or "Finicity-App-Token".');
    req.throwOn(404, ErrorMessageError, 'The resource doesn\'t exist');
    return req.callAsJson(accountOwnerSchema, requestOptions);
  }
}
